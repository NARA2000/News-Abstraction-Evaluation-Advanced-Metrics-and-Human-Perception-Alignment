data = pd.read_csv(file_path)
print("Original Dataset:")
display(data.head())
columns_to_drop = ['url', 'date', 'article_id','Unnamed: 0']
mod_data = data.drop(columns=columns_to_drop)

# Display the modified dataset after dropping the columns in a formatted table
print("\nDataset after dropping columns:")
display(mod_data.head())
X = mod_data[['articles']]
y1 = mod_data['desc']
y2 = mod_data['headline']
# Split the data into training and test sets (70% train, 30% test)
X_train, X_test, y1_train, y1_test, y2_train, y2_test = train_test_split(X, y1, y2, test_size=0.3, random_state=42)

# Print the shapes of the training and test sets to verify the split
print("Training set shape:", X_train.shape, y1_train.shape, y2_train.shape)
print("Test set shape:", X_test.shape, y1_test.shape, y2_test.shape)

# Display the first few rows of the training data for articles, descriptions, and headlines
print("\nTraining Data:")
training_data = pd.concat([X_train.head(), y1_train.head(), y2_train.head()], axis=1)
training_data.columns = ['Articles', 'Description', 'Headline']
display(training_data)

# Display the first few rows of the test data for articles, descriptions, and headlines
print("\nTest Data:")
test_data = pd.concat([X_test.head(), y1_test.head(), y2_test.head()], axis=1)
test_data.columns = ['Articles', 'Description', 'Headline']
display(test_data)

# Calculate the number of words in the article column
training_data['article_word_count'] = training_data['Articles'].apply(lambda x: len(x.split()))
test_data['article_word_count'] = test_data['Articles'].apply(lambda x: len(x.split()))

# Calculate the number of words in the description column
training_data['description_word_count'] = training_data['Description'].apply(lambda x: len(x.split()))
test_data['description_word_count'] = test_data['Description'].apply(lambda x: len(x.split()))

# Calculate the number of words in the headline column
training_data['headline_word_count'] = training_data['Headline'].apply(lambda x: len(x.split()))
test_data['headline_word_count'] = test_data['Headline'].apply(lambda x: len(x.split()))

# Print the first few rows of the updated training data
print("\n Training Data:")
display(training_data.head())

# Print the first few rows of the updated test data
print("\n Test Data:")
display(test_data.head())

import seaborn as sns
import matplotlib.pyplot as plt

# Set up the figure and axes
fig, axes = plt.subplots(1, 3, figsize=(15, 5))

# Create box plots for article word counts
sns.boxplot(y='article_word_count', data=training_data, ax=axes[0])
axes[0].set_title('Article Word Count')

# Create box plots for description word counts
sns.boxplot(y='description_word_count', data=training_data, ax=axes[1])
axes[1].set_title('Description Word Count')

# Create box plots for headline word counts
sns.boxplot(y='headline_word_count', data=training_data, ax=axes[2])
axes[2].set_title('Headline Word Count')

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()
